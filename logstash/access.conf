input {
     file {
         type => "access_log"
         path => "/log/xxx/accesslog-2019-*"
         exclude => "*.gz"
     }
}


filter {
                grok {
        match => { "message" => '%{SYSLOGTIMESTAMP:syslogtimestamp} %{IPV4:xxx_ip} %{IPV4:client_ip} - %{POSINT} \[%{NOTSPACE} %{ISO8601_TIMEZONE}\] %{HOSTNAME} "%{NOTSPACE:method} %{NOTSPACE:request}(?: HTTP/%{NUMBER:httpversion})" %{POSINT:response} %{INT:bytes} %{NUMBER:rpstime} "%{NOTSPACE:referer}" %{QS:agent} (?:%{QS:xforwardedfor}|-) "(?:(agw|(agw\((bip=%{IPV4:bip_has}\:%{POSINT}\;)?b=%{NOTSPACE:backend_has}\)\| )?agw\((bip=%{IPV4:bip}\:%{POSINT}\;)?b=%{NOTSPACE:backend}\)|agw\((bip=%{NOTSPACE:err_bip}\;)?b=%{NOTSPACE:backend}\))|-)" %{NOTSPACE:reject} http -'}
        tag_on_failure => ["not_match"]
                }
                if [response] == "200" or [response] == "302" or [response] == "301" {
                        drop{ }
                }
       geoip { source => "client_ip" }
       grok {match => {"request" => "%{NOTSPACE:request_base}\?%{NOTSPACE:request_query}"} tag_on_failure => ["no_method"]}
       kv {source => "request_query"
  field_split => "&"
  include_keys => ["method"]
  prefix => "query_"}

        date {
                match => ["syslogtimestamp", "MMM dd HH:mm:ss"]
                target => "@timestamp"
                timezone => "Asia/Shanghai"
                }
}

output {

    if 'not_match' not in [tags]{
       elasticsearch {
       hosts => ["xx.xx.xx.xx:9200"]
       index =>"logstash-%{type}-%{+YYYY.MM.dd}"
       document_type => "_doc"
       }
     }
}
